# Generated by Django 4.2 on 2024-11-23 21:45

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('carambus_py', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('kind', models.CharField(blank=True, null=True)),
                ('title', models.CharField(blank=True, null=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'announcements',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BranchCc',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('cc_id', models.IntegerField(blank=True, null=True)),
                ('context', models.CharField(blank=True, null=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'branch_ccs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CalendarEvent',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('summary', models.CharField(blank=True, null=True)),
                ('recurring', models.BooleanField(blank=True, null=True)),
                ('location_id', models.IntegerField(blank=True, null=True)),
                ('event_start', models.DateTimeField(blank=True, null=True)),
                ('event_end', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'calendar_events',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CategoryCc',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('context', models.CharField(blank=True, null=True)),
                ('max_age', models.IntegerField(blank=True, null=True)),
                ('min_age', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('sex', models.CharField(blank=True, null=True)),
                ('status', models.CharField(blank=True, null=True)),
                ('cc_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('branch_cc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='category_ccs_for_branch_cc', to='carambus_py.branchcc')),
            ],
            options={
                'db_table': 'category_ccs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ChampionshipTypeCc',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('cc_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('shortname', models.CharField(blank=True, null=True)),
                ('context', models.CharField(blank=True, null=True)),
                ('status', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('branch_cc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='championship_type_ccs_for_branch_cc', to='carambus_py.branchcc')),
            ],
            options={
                'db_table': 'championship_type_ccs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('ba_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('shortname', models.CharField(blank=True, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('homepage', models.CharField(blank=True, null=True)),
                ('email', models.CharField(blank=True, null=True)),
                ('priceinfo', models.TextField(blank=True, null=True)),
                ('logo', models.CharField(blank=True, null=True)),
                ('status', models.CharField(blank=True, null=True)),
                ('founded', models.CharField(blank=True, null=True)),
                ('dbu_entry', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('cc_id', models.IntegerField(blank=True, null=True)),
                ('dbu_nr', models.IntegerField(blank=True, null=True)),
                ('synonyms', models.TextField(blank=True, null=True)),
                ('source_url', models.CharField(blank=True, null=True)),
                ('sync_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'clubs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CompetitionCc',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('cc_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('context', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('branch_cc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='competition_ccs_for_branch_cc', to='carambus_py.branchcc')),
            ],
            options={
                'db_table': 'competition_ccs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, null=True)),
                ('code', models.CharField(blank=True, null=True, unique=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'countries',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DebugInfo',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('info', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'debug_infos',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Discipline',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('type', models.CharField(blank=True, null=True)),
                ('synonyms', models.TextField(blank=True, null=True)),
                ('team_size', models.IntegerField(blank=True, null=True)),
                ('branch_cc', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='discipline_for_branch_cc', to='carambus_py.branchcc')),
                ('competition_cc', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='discipline_for_competition_cc', to='carambus_py.competitioncc')),
            ],
            options={
                'db_table': 'disciplines',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DisciplinePhase',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, null=True)),
                ('discipline_id', models.IntegerField(blank=True, null=True)),
                ('parent_discipline_id', models.IntegerField(blank=True, null=True)),
                ('position', models.IntegerField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'discipline_phases',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('roles', models.TextField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('seqno', models.IntegerField(blank=True, null=True)),
                ('gname', models.CharField(blank=True, null=True)),
                ('group_no', models.IntegerField(blank=True, null=True)),
                ('table_no', models.IntegerField(blank=True, null=True)),
                ('round_no', models.IntegerField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('tournament_type', models.CharField(blank=True, null=True)),
            ],
            options={
                'db_table': 'games',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GamePlan',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('footprint', models.CharField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'game_plans',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GamePlanCc',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('cc_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('mp_won', models.IntegerField(blank=True, null=True)),
                ('mb_draw', models.IntegerField(blank=True, null=True)),
                ('mp_lost', models.IntegerField(blank=True, null=True)),
                ('znp', models.IntegerField(blank=True, null=True)),
                ('vorgabe', models.IntegerField(blank=True, null=True)),
                ('plausi', models.BooleanField(blank=True, null=True)),
                ('pez_partie', models.CharField(blank=True, null=True)),
                ('bez_brett', models.CharField(blank=True, null=True)),
                ('rang_partie', models.IntegerField(blank=True, null=True)),
                ('rang_mgd', models.IntegerField(blank=True, null=True)),
                ('rang_kegel', models.IntegerField(blank=True, null=True)),
                ('ersatzspieler_regel', models.IntegerField(blank=True, null=True)),
                ('row_type_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('branch_cc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_plan_ccs_for_branch_cc', to='carambus_py.branchcc')),
                ('discipline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_plan_ccs_for_discipline', to='carambus_py.discipline')),
            ],
            options={
                'db_table': 'game_plan_ccs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GroupCc',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('cc_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('context', models.CharField(blank=True, null=True)),
                ('display', models.CharField(blank=True, null=True)),
                ('status', models.CharField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('branch_cc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_ccs_for_branch_cc', to='carambus_py.branchcc')),
            ],
            options={
                'db_table': 'group_ccs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='InboundWebhook',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('status', models.IntegerField()),
                ('body', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'inbound_webhooks',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='IonContent',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('page_id', models.IntegerField(blank=True, null=True)),
                ('title', models.CharField(blank=True, null=True)),
                ('html', models.TextField(blank=True, null=True)),
                ('level', models.CharField(blank=True, null=True)),
                ('scraped_at', models.DateTimeField(blank=True, null=True)),
                ('deep_scraped_at', models.DateTimeField(blank=True, null=True)),
                ('ion_content_id', models.IntegerField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('position', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.BooleanField()),
            ],
            options={
                'db_table': 'ion_contents',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='League',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, null=True)),
                ('registration_until', models.DateField(blank=True, null=True)),
                ('organizer_id', models.IntegerField(blank=True, null=True)),
                ('ba_id', models.IntegerField(blank=True, null=True)),
                ('ba_id2', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('staffel_text', models.CharField(blank=True, null=True)),
                ('cc_id', models.IntegerField(blank=True, null=True)),
                ('shortname', models.CharField(blank=True, null=True)),
                ('type', models.CharField(blank=True, null=True)),
                ('source_url', models.CharField(blank=True, null=True)),
                ('sync_date', models.DateTimeField(blank=True, null=True)),
                ('cc_id2', models.IntegerField(blank=True, null=True)),
                ('game_parameters', models.TextField(blank=True, null=True)),
                ('game_plan_locked', models.BooleanField()),
                ('discipline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leagues_for_discipline', to='carambus_py.discipline')),
                ('game_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leagues_for_game_plan', to='carambus_py.gameplan')),
            ],
            options={
                'db_table': 'leagues',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LeagueCc',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('cc_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('context', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('shortname', models.CharField(blank=True, null=True)),
                ('status', models.CharField(blank=True, null=True)),
                ('report_form', models.CharField(blank=True, null=True)),
                ('report_form_data', models.CharField(blank=True, null=True)),
                ('cc_id2', models.IntegerField(blank=True, null=True)),
                ('game_plan_cc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='league_ccs_for_game_plan_cc', to='carambus_py.gameplancc')),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='league_ccs_for_league', to='carambus_py.league')),
            ],
            options={
                'db_table': 'league_ccs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LeagueTeam',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, null=True)),
                ('shortname', models.CharField(blank=True, null=True)),
                ('ba_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('source_url', models.CharField(blank=True, null=True)),
                ('sync_date', models.DateTimeField(blank=True, null=True)),
                ('cc_id', models.IntegerField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='league_teams_for_club', to='carambus_py.club')),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='league_teams_for_league', to='carambus_py.league')),
            ],
            options={
                'db_table': 'league_teams',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LeagueTeamCc',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('cc_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('shortname', models.CharField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('league_cc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='league_team_ccs_for_league_cc', to='carambus_py.leaguecc')),
                ('league_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='league_team_ccs_for_league_team', to='carambus_py.leagueteam')),
            ],
            options={
                'db_table': 'league_team_ccs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('address', models.TextField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('organizer_id', models.IntegerField(blank=True, null=True)),
                ('md5', models.CharField(unique=True)),
                ('synonyms', models.TextField(blank=True, null=True)),
                ('source_url', models.CharField(blank=True, null=True)),
                ('sync_date', models.DateTimeField(blank=True, null=True)),
                ('cc_id', models.IntegerField(blank=True, null=True)),
                ('dbu_nr', models.IntegerField(blank=True, null=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations_for_club', to='carambus_py.club')),
                ('organizer_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'db_table': 'locations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MetaMap',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('class_ba', models.CharField(blank=True, null=True)),
                ('class_cc', models.CharField(blank=True, null=True)),
                ('ba_base_url', models.CharField(blank=True, null=True)),
                ('cc_base_url', models.CharField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'meta_maps',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Party',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('ba_id', models.IntegerField(blank=True, null=True)),
                ('day_seqno', models.IntegerField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('section', models.CharField(blank=True, null=True)),
                ('cc_id', models.IntegerField(blank=True, null=True)),
                ('register_at', models.DateField(blank=True, null=True)),
                ('group', models.CharField(blank=True, null=True)),
                ('round', models.CharField(blank=True, null=True)),
                ('status', models.IntegerField(blank=True, null=True)),
                ('time', models.DateTimeField(blank=True, null=True)),
                ('source_url', models.CharField(blank=True, null=True)),
                ('sync_date', models.DateTimeField(blank=True, null=True)),
                ('reported_at', models.DateTimeField(blank=True, null=True)),
                ('reported_by_player_id', models.IntegerField(blank=True, null=True)),
                ('reported_by', models.CharField(blank=True, null=True)),
                ('party_no', models.IntegerField(blank=True, null=True)),
                ('manual_assignment', models.BooleanField(blank=True, null=True)),
                ('continuous_placements', models.BooleanField()),
                ('timeout', models.IntegerField()),
                ('timeouts', models.IntegerField(blank=True, null=True)),
                ('time_out_stoke_preparation_sec', models.IntegerField(blank=True, null=True)),
                ('time_out_warm_up_first_min', models.IntegerField(blank=True, null=True)),
                ('time_out_warm_up_follow_up_min', models.IntegerField(blank=True, null=True)),
                ('sets_to_play', models.IntegerField()),
                ('sets_to_win', models.IntegerField()),
                ('team_size', models.IntegerField()),
                ('fixed_display_left', models.CharField(blank=True, null=True)),
                ('allow_follow_up', models.BooleanField()),
                ('color_remains_with_set', models.BooleanField()),
                ('kickoff_switches_with', models.CharField(blank=True, null=True)),
                ('host_league_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parties_for_host_league_team', to='carambus_py.leagueteam')),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parties_for_league', to='carambus_py.league')),
                ('league_team_a', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parties_for_league_team_a', to='carambus_py.leagueteam')),
                ('league_team_b', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parties_for_league_for_league_team_b', to='carambus_py.leagueteam')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parties_for_location', to='carambus_py.location')),
                ('no_show_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parties_for_no_show_team', to='carambus_py.leagueteam')),
            ],
            options={
                'db_table': 'parties',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PartyCc',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('cc_id', models.IntegerField(blank=True, null=True)),
                ('day_seqno', models.IntegerField(blank=True, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('register_at', models.DateField(blank=True, null=True)),
                ('group', models.CharField(blank=True, null=True)),
                ('round', models.CharField(blank=True, null=True)),
                ('status', models.IntegerField(blank=True, null=True)),
                ('time', models.DateTimeField(blank=True, null=True)),
                ('match_id', models.IntegerField(blank=True, null=True)),
                ('league_cc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='party_ccs_for_league_cc', to='carambus_py.leaguecc')),
                ('league_team_a_cc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='party_ccs_for_league_team_a_cc', to='carambus_py.leagueteamcc')),
                ('league_team_b_cc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='party_ccs_for_league_team_b_cc', to='carambus_py.leagueteamcc')),
                ('league_team_host_cc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='party_ccs_for_league_team_host_cc', to='carambus_py.leagueteamcc')),
                ('party', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='party_cc_for_party', to='carambus_py.party')),
            ],
            options={
                'db_table': 'party_ccs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PartyGame',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('seqno', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('data', models.TextField(blank=True, null=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('discipline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='party_games_for_discipline', to='carambus_py.discipline')),
                ('party', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='party_games_for_party', to='carambus_py.party')),
            ],
            options={
                'db_table': 'party_games',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField()),
                ('amount', models.IntegerField()),
                ('interval', models.CharField()),
                ('details', models.JSONField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('trial_period_days', models.IntegerField(blank=True, null=True)),
                ('hidden', models.BooleanField(blank=True, null=True)),
                ('currency', models.CharField(blank=True, null=True)),
                ('interval_count', models.IntegerField(blank=True, null=True)),
                ('description', models.CharField(blank=True, null=True)),
                ('unit_label', models.CharField(blank=True, null=True)),
                ('charge_per_unit', models.BooleanField(blank=True, null=True)),
                ('stripe_id', models.CharField(blank=True, null=True)),
                ('braintree_id', models.CharField(blank=True, null=True)),
                ('paddle_billing_id', models.CharField(blank=True, null=True)),
                ('paddle_classic_id', models.CharField(blank=True, null=True)),
                ('lemon_squeezy_id', models.CharField(blank=True, null=True)),
                ('fake_processor_id', models.CharField(blank=True, null=True)),
                ('contact_url', models.CharField(blank=True, null=True)),
            ],
            options={
                'db_table': 'plans',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('ba_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('club_id', models.IntegerField(blank=True, null=True)),
                ('lastname', models.CharField(blank=True, null=True)),
                ('firstname', models.CharField(blank=True, null=True)),
                ('title', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('guest', models.BooleanField()),
                ('nickname', models.CharField(blank=True, null=True)),
                ('type', models.CharField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('tournament_id', models.IntegerField(blank=True, null=True)),
                ('cc_id', models.IntegerField(blank=True, null=True)),
                ('dbu_nr', models.IntegerField(blank=True, null=True)),
                ('dbu_pass_nr', models.IntegerField(blank=True, null=True)),
                ('fl_name', models.CharField(blank=True, null=True)),
                ('source_url', models.CharField(blank=True, null=True)),
                ('sync_date', models.DateTimeField(blank=True, null=True)),
                ('nrw_nr', models.IntegerField(blank=True, null=True)),
                ('pin4', models.CharField(blank=True, null=True)),
                ('logo', models.CharField(blank=True, null=True)),
            ],
            options={
                'db_table': 'players',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PlayerClass',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('shortname', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('discipline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_classes_for_discipline', to='carambus_py.discipline')),
            ],
            options={
                'db_table': 'player_classes',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, null=True)),
                ('shortname', models.CharField(blank=True, null=True, unique=True)),
                ('logo', models.CharField(blank=True, null=True)),
                ('email', models.CharField(blank=True, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('public_cc_url_base', models.CharField(blank=True, null=True)),
                ('dbu_name', models.CharField(blank=True, null=True)),
                ('telefon', models.CharField(blank=True, null=True)),
                ('fax', models.CharField(blank=True, null=True)),
                ('website', models.CharField(blank=True, null=True)),
                ('opening', models.CharField(blank=True, null=True)),
                ('source_url', models.CharField(blank=True, null=True)),
                ('sync_date', models.DateTimeField(blank=True, null=True)),
                ('cc_id', models.IntegerField(blank=True, null=True)),
                ('scrape_data', models.TextField(blank=True, null=True)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='regions_for_country', to='carambus_py.country')),
            ],
            options={
                'db_table': 'regions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RegistrationListCc',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('cc_id', models.IntegerField(blank=True, null=True)),
                ('context', models.CharField(blank=True, null=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('deadline', models.DateTimeField(blank=True, null=True)),
                ('qualifying_date', models.DateTimeField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('status', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('branch_cc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registration_list_ccs_for_branch_cc', to='carambus_py.branchcc')),
                ('category_cc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registration_list_ccs_for_category_cc', to='carambus_py.categorycc')),
                ('discipline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registration_list_ccs_for_discipline', to='carambus_py.discipline')),
            ],
            options={
                'db_table': 'registration_list_ccs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('ba_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('name', models.CharField(blank=True, null=True, unique=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'seasons',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('data', models.TextField(blank=True, null=True)),
                ('state', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='settings_for_club', to='carambus_py.club')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='settings_for_region', to='carambus_py.region')),
            ],
            options={
                'db_table': 'settings',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Slot',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('dayofweek', models.IntegerField(blank=True, null=True)),
                ('hourofday_start', models.IntegerField(blank=True, null=True)),
                ('minuteofhour_start', models.IntegerField(blank=True, null=True)),
                ('hourofday_end', models.IntegerField(blank=True, null=True)),
                ('minuteofhour_end', models.IntegerField(blank=True, null=True)),
                ('next_start', models.DateTimeField(blank=True, null=True)),
                ('next_end', models.DateTimeField(blank=True, null=True)),
                ('table_id', models.IntegerField(blank=True, null=True)),
                ('recurring', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'slots',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SyncHash',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('url', models.CharField(blank=True, null=True)),
                ('md5', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('doc', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'sync_hashes',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Table',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('ip_address', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('tpl_ip_address', models.IntegerField(blank=True, null=True)),
                ('event_id', models.CharField(blank=True, null=True)),
                ('event_summary', models.CharField(blank=True, null=True)),
                ('event_creator', models.CharField(blank=True, null=True)),
                ('event_start', models.DateTimeField(blank=True, null=True)),
                ('event_end', models.DateTimeField(blank=True, null=True)),
                ('heater_on_reason', models.CharField(blank=True, null=True)),
                ('heater_off_reason', models.CharField(blank=True, null=True)),
                ('heater_switched_on_at', models.DateTimeField(blank=True, null=True)),
                ('heater_switched_off_at', models.DateTimeField(blank=True, null=True)),
                ('heater', models.BooleanField(blank=True, null=True)),
                ('manual_heater_on_at', models.DateTimeField(blank=True, null=True)),
                ('manual_heater_off_at', models.DateTimeField(blank=True, null=True)),
                ('scoreboard', models.BooleanField(blank=True, null=True)),
                ('scoreboard_on_at', models.DateTimeField(blank=True, null=True)),
                ('scoreboard_off_at', models.DateTimeField(blank=True, null=True)),
                ('heater_auto', models.BooleanField(blank=True, null=True)),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tables_for_location', to='carambus_py.location')),
            ],
            options={
                'db_table': 'tables',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TableKind',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, null=True)),
                ('short', models.CharField(blank=True, null=True)),
                ('measures', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'table_kinds',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, null=True)),
                ('modus', models.CharField(blank=True, null=True)),
                ('age_restriction', models.CharField(blank=True, null=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('accredation_end', models.DateTimeField(blank=True, null=True)),
                ('location_text', models.TextField(blank=True, null=True)),
                ('ba_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('plan_or_show', models.CharField(blank=True, null=True)),
                ('single_or_league', models.CharField(blank=True, null=True)),
                ('shortname', models.CharField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('ba_state', models.CharField(blank=True, null=True)),
                ('state', models.CharField(blank=True, null=True)),
                ('sync_date', models.DateTimeField(blank=True, null=True)),
                ('player_class', models.CharField(blank=True, null=True)),
                ('innings_goal', models.IntegerField(blank=True, null=True)),
                ('balls_goal', models.IntegerField(blank=True, null=True)),
                ('handicap_tournier', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('timeout', models.IntegerField(blank=True, null=True)),
                ('time_out_warm_up_first_min', models.IntegerField(blank=True, null=True)),
                ('time_out_warm_up_follow_up_min', models.IntegerField(blank=True, null=True)),
                ('organizer_id', models.IntegerField(blank=True, null=True)),
                ('timeouts', models.IntegerField()),
                ('admin_controlled', models.BooleanField()),
                ('gd_has_prio', models.BooleanField()),
                ('sets_to_win', models.IntegerField()),
                ('sets_to_play', models.IntegerField()),
                ('team_size', models.IntegerField()),
                ('fixed_display_left', models.CharField(blank=True, null=True)),
                ('color_remains_with_set', models.BooleanField()),
                ('allow_follow_up', models.BooleanField()),
                ('continuous_placements', models.BooleanField()),
                ('manual_assignment', models.BooleanField(blank=True, null=True)),
                ('kickoff_switches_with', models.CharField(blank=True, null=True)),
                ('source_url', models.CharField(blank=True, null=True)),
                ('discipline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournaments_for_discipline', to='carambus_py.discipline')),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournaments_for_league', to='carambus_py.league')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournaments_for_location', to='carambus_py.location')),
                ('organizer_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournaments_for_region', to='carambus_py.region')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournaments_for_season', to='carambus_py.season')),
                ('setting', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='tournaments_for_setting', to='carambus_py.setting')),
            ],
            options={
                'db_table': 'tournaments',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TournamentPlan',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, null=True)),
                ('rulesystem', models.TextField(blank=True, null=True)),
                ('players', models.IntegerField(blank=True, null=True)),
                ('tables', models.IntegerField(blank=True, null=True)),
                ('more_description', models.TextField(blank=True, null=True)),
                ('even_more_description', models.TextField(blank=True, null=True)),
                ('executor_class', models.CharField(blank=True, null=True)),
                ('executor_params', models.TextField(blank=True, null=True)),
                ('ngroups', models.IntegerField(blank=True, null=True)),
                ('nrepeats', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'tournament_plans',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TournamentSeriesCc',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('cc_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('branch_cc_id', models.IntegerField(blank=True, null=True)),
                ('season', models.CharField(blank=True, null=True)),
                ('valuation', models.IntegerField(blank=True, null=True)),
                ('series_valuation', models.IntegerField(blank=True, null=True)),
                ('no_tournaments', models.IntegerField(blank=True, null=True)),
                ('point_formula', models.CharField(blank=True, null=True)),
                ('min_points', models.IntegerField(blank=True, null=True)),
                ('point_fraction', models.IntegerField(blank=True, null=True)),
                ('price_money', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('currency', models.CharField(blank=True, null=True)),
                ('club_id', models.CharField(blank=True, null=True)),
                ('show_jackpot', models.IntegerField(blank=True, null=True)),
                ('jackpot', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('status', models.CharField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'tournament_series_ccs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Upload',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('filename', models.CharField(blank=True, null=True)),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('position', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'uploads',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Version',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('item_type', models.CharField(blank=True, null=True)),
                ('item_id', models.BigIntegerField(blank=True, null=True)),
                ('event', models.CharField(blank=True, null=True)),
                ('whodunnit', models.CharField(blank=True, null=True)),
                ('object', models.TextField(blank=True, null=True)),
                ('object_changes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'versions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('email', models.CharField(unique=True)),
                ('encrypted_password', models.CharField()),
                ('reset_password_token', models.CharField(blank=True, null=True, unique=True)),
                ('reset_password_sent_at', models.DateTimeField(blank=True, null=True)),
                ('remember_created_at', models.DateTimeField(blank=True, null=True)),
                ('confirmation_token', models.CharField(blank=True, null=True, unique=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('confirmation_sent_at', models.DateTimeField(blank=True, null=True)),
                ('unconfirmed_email', models.CharField(blank=True, null=True)),
                ('first_name', models.CharField(blank=True, null=True)),
                ('last_name', models.CharField(blank=True, null=True)),
                ('time_zone', models.CharField(blank=True, null=True)),
                ('accepted_terms_at', models.DateTimeField(blank=True, null=True)),
                ('accepted_privacy_at', models.DateTimeField(blank=True, null=True)),
                ('announcements_read_at', models.DateTimeField(blank=True, null=True)),
                ('admin', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('invitation_token', models.CharField(blank=True, null=True, unique=True)),
                ('invitation_created_at', models.DateTimeField(blank=True, null=True)),
                ('invitation_sent_at', models.DateTimeField(blank=True, null=True)),
                ('invitation_accepted_at', models.DateTimeField(blank=True, null=True)),
                ('invitation_limit', models.IntegerField(blank=True, null=True)),
                ('invited_by_type', models.CharField(blank=True, null=True)),
                ('invited_by_id', models.BigIntegerField(blank=True, null=True)),
                ('invitations_count', models.IntegerField(blank=True, null=True)),
                ('preferred_language', models.CharField(blank=True, null=True)),
                ('username', models.CharField(blank=True, null=True, unique=True)),
                ('firstname', models.CharField(blank=True, null=True)),
                ('lastname', models.CharField(blank=True, null=True)),
                ('sign_in_count', models.IntegerField(blank=True, null=True)),
                ('current_sign_in_at', models.DateTimeField(blank=True, null=True)),
                ('last_sign_in_at', models.DateTimeField(blank=True, null=True)),
                ('current_sign_in_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('last_sign_in_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('otp_required_for_login', models.BooleanField(blank=True, null=True)),
                ('otp_secret', models.CharField(blank=True, null=True)),
                ('last_otp_timestep', models.IntegerField(blank=True, null=True)),
                ('otp_backup_codes', models.TextField(blank=True, null=True)),
                ('code', models.CharField(blank=True, null=True)),
                ('preferences', models.JSONField(blank=True, null=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='users_for_player', to='carambus_py.player')),
            ],
            options={
                'db_table': 'users',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TournamentMonitor',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('data', models.TextField(blank=True, null=True)),
                ('state', models.CharField(blank=True, null=True)),
                ('innings_goal', models.IntegerField(blank=True, null=True)),
                ('balls_goal', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('timeouts', models.IntegerField(blank=True, null=True)),
                ('timeout', models.IntegerField()),
                ('sets_to_win', models.IntegerField()),
                ('sets_to_play', models.IntegerField()),
                ('fixed_display_left', models.CharField(blank=True, null=True)),
                ('color_remains_with_set', models.BooleanField()),
                ('team_size', models.IntegerField()),
                ('allow_follow_up', models.BooleanField()),
                ('allow_overflow', models.BooleanField(blank=True, null=True)),
                ('kickoff_switches_with', models.CharField(blank=True, null=True)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_monitor_for_tournament', to='carambus_py.tournament')),
            ],
            options={
                'db_table': 'tournament_monitors',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TournamentLocal',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('timeout', models.IntegerField(blank=True, null=True)),
                ('timeouts', models.IntegerField(blank=True, null=True)),
                ('admin_controlled', models.BooleanField(blank=True, null=True)),
                ('gd_has_prio', models.BooleanField(blank=True, null=True)),
                ('sets_to_win', models.IntegerField()),
                ('sets_to_play', models.IntegerField()),
                ('team_size', models.IntegerField()),
                ('fixed_display_left', models.CharField(blank=True, null=True)),
                ('color_remains_with_set', models.BooleanField()),
                ('allow_follow_up', models.BooleanField()),
                ('kickoff_switches_with', models.CharField(blank=True, null=True)),
                ('innings_goal', models.IntegerField(blank=True, null=True)),
                ('balls_goal', models.IntegerField(blank=True, null=True)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_local_for_tournament', to='carambus_py.tournament')),
            ],
            options={
                'db_table': 'tournament_locals',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TournamentCc',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('cc_id', models.IntegerField(blank=True, null=True)),
                ('context', models.CharField(blank=True, null=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('shortname', models.CharField(blank=True, null=True)),
                ('status', models.CharField(blank=True, null=True)),
                ('season', models.CharField(blank=True, null=True)),
                ('registration_rule', models.IntegerField(blank=True, null=True)),
                ('tournament_start', models.DateTimeField(blank=True, null=True)),
                ('tournament_end', models.DateTimeField(blank=True, null=True)),
                ('starting_at', models.TimeField(blank=True, null=True)),
                ('league_climber_quote', models.IntegerField(blank=True, null=True)),
                ('entry_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('max_players', models.IntegerField(blank=True, null=True)),
                ('location_text', models.CharField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('poster', models.CharField(blank=True, null=True)),
                ('tender', models.CharField(blank=True, null=True)),
                ('flowchart', models.CharField(blank=True, null=True)),
                ('ranking_list', models.CharField(blank=True, null=True)),
                ('successor_list', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('branch_cc_name', models.CharField(blank=True, null=True)),
                ('category_cc_name', models.CharField(blank=True, null=True)),
                ('championship_type_cc_name', models.CharField(blank=True, null=True)),
                ('branch_cc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_ccs_for_branch_cc', to='carambus_py.branchcc')),
                ('category_cc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_ccs_for_category_cc', to='carambus_py.categorycc')),
                ('championship_type_cc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_ccs_for_championship_type_cc', to='carambus_py.championshiptypecc')),
                ('discipline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_ccs_for_discipline', to='carambus_py.discipline')),
                ('group_cc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_ccs_for_group_cc', to='carambus_py.groupcc')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_ccs_for_location', to='carambus_py.location')),
                ('registration_list_cc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_ccs_for_registration_list_cc', to='carambus_py.registrationlistcc')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_cc_for_tournament', to='carambus_py.tournament')),
                ('tournament_series_cc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_ccs_for_tournament_series_cc', to='carambus_py.tournamentseriescc')),
            ],
            options={
                'db_table': 'tournament_ccs',
                'managed': True,
                'unique_together': {('cc_id', 'context')},
            },
        ),
        migrations.AddField(
            model_name='tournament',
            name='tournament_cc',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_for_tournament_cc', to='carambus_py.tournamentcc'),
        ),
        migrations.AddField(
            model_name='tournament',
            name='tournament_local',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_for_tournament_local', to='carambus_py.tournamentlocal'),
        ),
        migrations.AddField(
            model_name='tournament',
            name='tournament_monitor',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_for_tournament_monitor', to='carambus_py.tournamentmonitor'),
        ),
        migrations.AddField(
            model_name='tournament',
            name='tournament_plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournaments_for_tournament_plan', to='carambus_py.tournamentplan'),
        ),
        migrations.CreateModel(
            name='TableMonitor',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('state', models.CharField(blank=True, null=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('next_game_id', models.IntegerField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('ip_address', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('active_timer', models.CharField(blank=True, null=True)),
                ('timer_start_at', models.DateTimeField(blank=True, null=True)),
                ('timer_finish_at', models.DateTimeField(blank=True, null=True)),
                ('timer_halt_at', models.DateTimeField(blank=True, null=True)),
                ('nnn', models.IntegerField(blank=True, null=True)),
                ('panel_state', models.CharField()),
                ('current_element', models.CharField()),
                ('timer_job_id', models.CharField(blank=True, null=True)),
                ('clock_job_id', models.CharField(blank=True, null=True)),
                ('copy_from', models.IntegerField(blank=True, null=True)),
                ('tournament_monitor_type', models.CharField(blank=True, null=True)),
                ('prev_data', models.TextField(blank=True, null=True)),
                ('prev_tournament_monitor_id', models.IntegerField(blank=True, null=True)),
                ('game', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='table_monitor_for_game', to='carambus_py.game')),
                ('prev_game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='table_monitors_for_prev_game', to='carambus_py.game')),
                ('prev_tournament_monitor_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('table', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='table_monitors_for_table', to='carambus_py.table')),
                ('tournament_monitor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='table_monitors_for_tournament_monitor', to='carambus_py.tournamentmonitor')),
            ],
            options={
                'db_table': 'table_monitors',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TableLocal',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('tpl_ip_address', models.CharField(blank=True, null=True)),
                ('ip_address', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('event_id', models.CharField(blank=True, null=True)),
                ('event_summary', models.CharField(blank=True, null=True)),
                ('event_creator', models.CharField(blank=True, null=True)),
                ('event_start', models.DateTimeField(blank=True, null=True)),
                ('event_end', models.DateTimeField(blank=True, null=True)),
                ('heater_on_reason', models.CharField(blank=True, null=True)),
                ('heater_off_reason', models.CharField(blank=True, null=True)),
                ('heater_switched_on_at', models.DateTimeField(blank=True, null=True)),
                ('heater_switched_off_at', models.DateTimeField(blank=True, null=True)),
                ('heater', models.BooleanField(blank=True, null=True)),
                ('manual_heater_on_at', models.DateTimeField(blank=True, null=True)),
                ('manual_heater_off_at', models.DateTimeField(blank=True, null=True)),
                ('scoreboard', models.BooleanField(blank=True, null=True)),
                ('scoreboard_on_at', models.DateTimeField(blank=True, null=True)),
                ('scoreboard_off_at', models.DateTimeField(blank=True, null=True)),
                ('table', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='table_local_for_table', to='carambus_py.table')),
            ],
            options={
                'db_table': 'table_locals',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='table',
            name='table_kind',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tables_for_table_kind', to='carambus_py.tablekind'),
        ),
        migrations.AddField(
            model_name='table',
            name='table_local',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='table_for_table_local', to='carambus_py.tablelocal'),
        ),
        migrations.AddField(
            model_name='table',
            name='table_monitor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='table_for_table_monitor', to='carambus_py.tablemonitor'),
        ),
        migrations.AddField(
            model_name='setting',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='settings_for_tournament', to='carambus_py.tournament'),
        ),
        migrations.CreateModel(
            name='Seeding',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('ba_state', models.CharField(blank=True, null=True)),
                ('position', models.IntegerField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('state', models.CharField(blank=True, null=True)),
                ('balls_goal', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('role', models.CharField(blank=True, null=True)),
                ('tournament_id', models.PositiveIntegerField()),
                ('league_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seedings_for_league_team', to='carambus_py.leagueteam')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seedings_for_player', to='carambus_py.player')),
                ('playing_discipline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seedings_for_discipline', to='carambus_py.discipline')),
                ('tournament_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'db_table': 'seedings',
                'ordering': ['position'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SeasonCc',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('cc_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('context', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('competition_cc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='season_cc_for_competition_cc', to='carambus_py.competitioncc')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='season_cc_for_season', to='carambus_py.season')),
            ],
            options={
                'db_table': 'season_ccs',
                'managed': True,
                'unique_together': {('competition_cc_id', 'cc_id', 'context')},
            },
        ),
        migrations.AddField(
            model_name='registrationlistcc',
            name='season',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registration_list_ccs_for_season', to='carambus_py.season'),
        ),
        migrations.CreateModel(
            name='RegionCc',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('cc_id', models.IntegerField(blank=True, null=True)),
                ('context', models.CharField(blank=True, null=True, unique=True)),
                ('shortname', models.CharField(blank=True, null=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('base_url', models.CharField(blank=True, null=True)),
                ('public_url', models.CharField(blank=True, null=True)),
                ('username', models.CharField(blank=True, null=True)),
                ('userpw', models.CharField(blank=True, null=True)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='region_ccs_for_region', to='carambus_py.region')),
            ],
            options={
                'db_table': 'region_ccs',
                'managed': True,
                'unique_together': {('cc_id', 'context')},
            },
        ),
        migrations.AddField(
            model_name='region',
            name='region_cc',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='region_for_region_cc', to='carambus_py.regioncc'),
        ),
        migrations.AddField(
            model_name='region',
            name='setting',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='region_for_setting', to='carambus_py.setting'),
        ),
        migrations.CreateModel(
            name='PlayerRanking',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('org_level', models.CharField(blank=True, null=True)),
                ('innings', models.IntegerField(blank=True, null=True)),
                ('tournament_player_class_id', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(blank=True, null=True)),
                ('points', models.IntegerField(blank=True, null=True)),
                ('gd', models.FloatField(blank=True, null=True)),
                ('hs', models.IntegerField(blank=True, null=True)),
                ('bed', models.FloatField(blank=True, null=True)),
                ('btg', models.FloatField(blank=True, null=True)),
                ('p_gd', models.FloatField(blank=True, null=True)),
                ('pp_gd', models.FloatField(blank=True, null=True)),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('g', models.IntegerField(blank=True, null=True)),
                ('v', models.IntegerField(blank=True, null=True)),
                ('quote', models.FloatField(blank=True, null=True)),
                ('sp_g', models.IntegerField(blank=True, null=True)),
                ('sp_v', models.IntegerField(blank=True, null=True)),
                ('sp_quote', models.FloatField(blank=True, null=True)),
                ('balls', models.IntegerField(blank=True, null=True)),
                ('sets', models.IntegerField(blank=True, null=True)),
                ('t_ids', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('discipline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_rankings_for_discipline', to='carambus_py.discipline')),
                ('p_player_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_rankings_for_p_player_class', to='carambus_py.playerclass')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_rankings_for_player', to='carambus_py.player')),
                ('player_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_rankings_for_player_class', to='carambus_py.playerclass')),
                ('pp_player_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_rankings_for_pp_player_class', to='carambus_py.playerclass')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_rankings_for_region', to='carambus_py.region')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_rankings_for_season', to='carambus_py.season')),
            ],
            options={
                'db_table': 'player_rankings',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='player',
            name='admin_user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='player_for_user', to='carambus_py.user'),
        ),
        migrations.CreateModel(
            name='PartyMonitor',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('state', models.CharField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('timeout', models.IntegerField()),
                ('timeouts', models.IntegerField(blank=True, null=True)),
                ('time_out_stoke_preparation_sec', models.IntegerField(blank=True, null=True)),
                ('time_out_warm_up_first_min', models.IntegerField(blank=True, null=True)),
                ('time_out_warm_up_follow_up_min', models.IntegerField(blank=True, null=True)),
                ('sets_to_play', models.IntegerField()),
                ('sets_to_win', models.IntegerField()),
                ('team_size', models.IntegerField()),
                ('fixed_display_left', models.CharField(blank=True, null=True)),
                ('allow_follow_up', models.BooleanField()),
                ('color_remains_with_set', models.BooleanField()),
                ('kickoff_switches_with', models.CharField(blank=True, null=True)),
                ('party', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='party_monitor_for_party', to='carambus_py.party')),
            ],
            options={
                'db_table': 'party_monitors',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PartyGameCc',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('cc_id', models.IntegerField(blank=True, null=True)),
                ('seqno', models.IntegerField(blank=True, null=True)),
                ('player_a_id', models.IntegerField(blank=True, null=True)),
                ('player_b_id', models.IntegerField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('discipline_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('party_cc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='party_game_ccs_for_party_cc', to='carambus_py.partycc')),
                ('party_game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='party_game_cc_for_party_game', to='carambus_py.partygame')),
            ],
            options={
                'db_table': 'party_game_ccs',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='partygame',
            name='party_game_cc',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='party_game_for_party_game_cc', to='carambus_py.partygamecc'),
        ),
        migrations.AddField(
            model_name='partygame',
            name='player_a',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='party_games_for_player_a', to='carambus_py.player'),
        ),
        migrations.AddField(
            model_name='partygame',
            name='player_b',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='party_games_for_player_b', to='carambus_py.player'),
        ),
        migrations.AddField(
            model_name='party',
            name='party_cc',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='party_for_party_cc', to='carambus_py.partycc'),
        ),
        migrations.AddField(
            model_name='party',
            name='party_monitor',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='party_for_party_monitor', to='carambus_py.partymonitor'),
        ),
        migrations.CreateModel(
            name='NotificationToken',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('token', models.CharField()),
                ('platform', models.CharField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='carambus_py.user')),
            ],
            options={
                'db_table': 'notification_tokens',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='location',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations_for_region', to='carambus_py.region'),
        ),
        migrations.AddField(
            model_name='leagueteam',
            name='league_team_cc',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='league_team_for_league_team_cc', to='carambus_py.leagueteamcc'),
        ),
        migrations.AddField(
            model_name='leaguecc',
            name='season_cc',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='league_ccs_for_season_cc', to='carambus_py.seasoncc'),
        ),
        migrations.AddField(
            model_name='league',
            name='league_cc',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='league_for_league_cc', to='carambus_py.leaguecc'),
        ),
        migrations.AddField(
            model_name='league',
            name='organizer_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='league',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leagues_for_region', to='carambus_py.region'),
        ),
        migrations.AddField(
            model_name='league',
            name='season',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leagues_for_season', to='carambus_py.season'),
        ),
        migrations.CreateModel(
            name='IonModule',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('module_id', models.CharField(blank=True, null=True)),
                ('module_type', models.CharField(blank=True, null=True)),
                ('position', models.IntegerField(blank=True, null=True)),
                ('html', models.TextField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('ion_content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ion_modules_for_ion_content', to='carambus_py.ioncontent')),
            ],
            options={
                'db_table': 'ion_modules',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GamePlanRowCc',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('cc_id', models.IntegerField(blank=True, null=True)),
                ('game_plan_id', models.IntegerField(blank=True, null=True)),
                ('home_brett', models.IntegerField(blank=True, null=True)),
                ('visitor_brett', models.IntegerField(blank=True, null=True)),
                ('sets', models.IntegerField(blank=True, null=True)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('ppg', models.IntegerField(blank=True, null=True)),
                ('ppu', models.IntegerField(blank=True, null=True)),
                ('ppv', models.IntegerField(blank=True, null=True)),
                ('mpg', models.IntegerField(blank=True, null=True)),
                ('pmv', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('discipline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_plan_row_ccs_for_discipline', to='carambus_py.discipline')),
            ],
            options={
                'db_table': 'game_plan_row_ccs',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='game',
            name='table_monitor',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='game_for_table_monitor', to='carambus_py.tablemonitor'),
        ),
        migrations.AddField(
            model_name='game',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='games_for_tournament', to='carambus_py.tournament'),
        ),
        migrations.AddField(
            model_name='game',
            name='was_table_monitor',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='game_for_was_tournament', to='carambus_py.tablemonitor'),
        ),
        migrations.CreateModel(
            name='DisciplineTournamentPlan',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('points', models.IntegerField(blank=True, null=True)),
                ('innings', models.IntegerField(blank=True, null=True)),
                ('players', models.IntegerField(blank=True, null=True)),
                ('player_class', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('discipline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discipline_tournament_plans_for_discipline', to='carambus_py.discipline')),
                ('tournament_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discipline_tournament_plans_for_tournament_plan', to='carambus_py.tournamentplan')),
            ],
            options={
                'db_table': 'discipline_tournament_plans',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DisciplineCc',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('cc_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('context', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('branch_cc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discipline_ccs_for_branch_cc', to='carambus_py.branchcc')),
                ('discipline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discipline_ccs_for_discipline', to='carambus_py.discipline')),
            ],
            options={
                'db_table': 'discipline_ccs',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='discipline',
            name='discipline_cc',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='discipline_for_discipline_cc', to='carambus_py.disciplinecc'),
        ),
        migrations.AddField(
            model_name='discipline',
            name='super_discipline',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='disciplines_for_discipline', to='carambus_py.discipline'),
        ),
        migrations.AddField(
            model_name='discipline',
            name='table_kind',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='disciplines_for_table_kind', to='carambus_py.tablekind'),
        ),
        migrations.CreateModel(
            name='ConnectedAccount',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('owner_id', models.BigIntegerField(blank=True, null=True)),
                ('provider', models.CharField(blank=True, null=True)),
                ('uid', models.CharField(blank=True, null=True)),
                ('refresh_token', models.CharField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('auth', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('access_token', models.CharField(blank=True, null=True)),
                ('access_token_secret', models.CharField(blank=True, null=True)),
                ('owner_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'db_table': 'connected_accounts',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='competitioncc',
            name='discipline',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='competition_ccs_for_discipline', to='carambus_py.discipline'),
        ),
        migrations.CreateModel(
            name='ClubLocation',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='club_locations_for_club', to='carambus_py.club')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='club_locations_for_location', to='carambus_py.location')),
            ],
            options={
                'db_table': 'club_locations',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='club',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clubs_for_region', to='carambus_py.region'),
        ),
        migrations.AddField(
            model_name='branchcc',
            name='discipline',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='branch_ccs_for_discipline', to='carambus_py.discipline'),
        ),
        migrations.AddField(
            model_name='branchcc',
            name='region_cc',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='branch_ccs_for_region_cc', to='carambus_py.regioncc'),
        ),
        migrations.CreateModel(
            name='ApiToken',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('token', models.CharField(blank=True, null=True, unique=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('transient', models.BooleanField(blank=True, null=True)),
                ('last_used_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='carambus_py.user')),
            ],
            options={
                'db_table': 'api_tokens',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Addresse',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('addressable_id', models.BigIntegerField()),
                ('address_type', models.IntegerField(blank=True, null=True)),
                ('line1', models.CharField(blank=True, null=True)),
                ('line2', models.CharField(blank=True, null=True)),
                ('city', models.CharField(blank=True, null=True)),
                ('state', models.CharField(blank=True, null=True)),
                ('country', models.CharField(blank=True, null=True)),
                ('postal_code', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('addressable_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'db_table': 'addresses',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField()),
                ('personal', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('extra_billing_info', models.TextField(blank=True, null=True)),
                ('domain', models.CharField(blank=True, null=True)),
                ('subdomain', models.CharField(blank=True, null=True)),
                ('billing_email', models.CharField(blank=True, null=True)),
                ('account_users_count', models.IntegerField(blank=True, null=True)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='accounts_for_owner', to='carambus_py.user')),
            ],
            options={
                'db_table': 'accounts',
            },
        ),
        migrations.CreateModel(
            name='SeasonParticipation',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('data', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('status', models.CharField(blank=True, null=True)),
                ('ba_id', models.IntegerField(blank=True, null=True)),
                ('source_url', models.CharField(blank=True, null=True)),
                ('sync_date', models.DateTimeField(blank=True, null=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='season_participations_for_club', to='carambus_py.club')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='season_participations_for_player', to='carambus_py.player')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='season_participations_for_season', to='carambus_py.season')),
            ],
            options={
                'db_table': 'season_participations',
                'managed': True,
                'unique_together': {('player_id', 'club_id', 'season_id')},
            },
        ),
        migrations.CreateModel(
            name='RegistrationCc',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registration_ccs_for_player', to='carambus_py.player')),
                ('registration_list_cc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registration_ccs_for_registration_list_cc', to='carambus_py.registrationlistcc')),
            ],
            options={
                'db_table': 'registration_ccs',
                'managed': True,
                'unique_together': {('player_id', 'registration_list_cc_id')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='league',
            unique_together={('ba_id', 'ba_id2')},
        ),
        migrations.CreateModel(
            name='GameParticipation',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('role', models.CharField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('points', models.IntegerField(blank=True, null=True)),
                ('result', models.IntegerField(blank=True, null=True)),
                ('innings', models.IntegerField(blank=True, null=True)),
                ('gd', models.FloatField(blank=True, null=True)),
                ('hs', models.IntegerField(blank=True, null=True)),
                ('gname', models.CharField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('sets', models.IntegerField(blank=True, null=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_participations_for_game', to='carambus_py.game')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_participations_for_player', to='carambus_py.player')),
            ],
            options={
                'db_table': 'game_participations',
                'managed': True,
                'unique_together': {('game_id', 'player_id', 'role')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='discipline',
            unique_together={('name', 'table_kind_id')},
        ),
        migrations.AlterUniqueTogether(
            name='competitioncc',
            unique_together={('branch_cc_id', 'cc_id', 'context')},
        ),
        migrations.AlterUniqueTogether(
            name='branchcc',
            unique_together={('region_cc_id', 'cc_id', 'context')},
        ),
        migrations.CreateModel(
            name='AccountUser',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('roles', models.JSONField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='carambus_py.account')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='carambus_py.user')),
            ],
            options={
                'db_table': 'account_users',
                'managed': True,
                'unique_together': {('account', 'user')},
            },
        ),
        migrations.CreateModel(
            name='AccountInvitation',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('token', models.CharField(blank=True, null=True, unique=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('email', models.CharField(blank=True, null=True)),
                ('roles', models.JSONField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='carambus_py.account')),
                ('invited_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='account_invitations_for_user', to='carambus_py.user')),
            ],
            options={
                'db_table': 'account_invitations',
                'managed': True,
                'unique_together': {('account', 'email')},
            },
        ),
    ]
